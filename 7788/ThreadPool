package w.x.z.my_threadpool;

import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * Created by 123456 on 2017/8/7.
 */
/**
 * 　　1.当线程池小于corePoolSize时，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。
 　　2.当线程池达到corePoolSize时，新提交任务将被放入workQueue中，等待线程池中任务调度执行
 　　3.当workQueue已满，且maximumPoolSize>corePoolSize时，新提交任务会创建新线程执行任务
 　　4.当提交任务数超过maximumPoolSize时，新提交任务由RejectedExecutionHandler处理
 　　5.当线程池中超过corePoolSize线程，空闲时间达到keepAliveTime时，关闭空闲线程
 　　6.当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize线程空闲时间达到keepAliveTime也将关闭
 *
 * */
public class ThreadUtils {
    private static final int CORE_POOL_SIZE=1;
    private static final int MAX_NUM_POOL_SIZE=1;
    private static final long KEEP_ALIVE_TIME = 60L;
    private static final TimeUnit UNIT=TimeUnit.SECONDS;
    private static final int CACHE_POOL = 10;
    private static final int SCHEDULED_POOL = 11;
    private static final int FIXED_POOL = 12;
    private static final int SINGLE_POOL = 13;
    private static ThreadPoolExecutor threadPoolExecutor;
    private static final java.util.concurrent.BlockingQueue<java.lang.Runnable> WORK_QUEUE=new LinkedBlockingQueue<>();

    static {
//        CORE_POOL_SIZE=Runtime.getRuntime().availableProcessors();
        threadPoolExecutor = new ThreadPoolExecutor(CORE_POOL_SIZE, MAX_NUM_POOL_SIZE, KEEP_ALIVE_TIME, UNIT, WORK_QUEUE);
    }
    public static void execute(Runnable runnable){
        threadPoolExecutor.execute(runnable);
    }
    public static void finish(){
        threadPoolExecutor.shutdown();
    }
    public static ExecutorService pool_back(int type){
        switch (type){
            case CACHE_POOL:
                ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
                return cachedThreadPool;
            case SCHEDULED_POOL:
                ScheduledExecutorService scheduleThreadPool = Executors.newScheduledThreadPool(10);
                return scheduleThreadPool;
            case FIXED_POOL:
                ExecutorService fixedThreadPool = Executors.newFixedThreadPool(10);
                return fixedThreadPool;
            case SINGLE_POOL:
                ExecutorService singleThreadPool = Executors.newSingleThreadExecutor();
                return singleThreadPool;
            default:
                return null;
        }
    }

}
