mainfest.xml
-----------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="w.x.z.mycontentprovider">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <provider
            android:authorities="w.x.z.mycontentprovider.dododprovider"
            android:name=".Bookprovider"
            android:process=":provider"></provider>
    </application>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>

</manifest>
-------------------------------
ContentProvider:
package w.x.z.mycontentprovider;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.support.annotation.Nullable;
import android.util.Log;

/**
 * Created by 123456 on 2017/6/30.
 */
public class Bookprovider extends ContentProvider {
    private static final String AUTHORITY="w.x.z.mycontentprovider.dododprovider";
    private static final String PROVIDER_URI="content://w.x.z.mycontentprovider.dododprovider";
    private static final Uri PROVIDER_BOOK_URI= Uri.parse("content://w.x.z.mycontentprovider.dododprovider/book");
    private static final Uri PROVIDER_USER_URI=Uri.parse("content://w.x.z.mycontentprovider.dododprovider/user");
    private static final int BOOK_URI_CODE=0;
    private static final int USER_URI_CODE=1;
    private static final UriMatcher um=new UriMatcher(UriMatcher.NO_MATCH);
    static {
        um.addURI(AUTHORITY,"book",BOOK_URI_CODE);
        um.addURI(AUTHORITY,"user",USER_URI_CODE);
    }

    private SQLiteDatabase db;
    private Context context;

    private String gettablename(Uri uri){
        String table_name=null;
        switch (um.match(uri)){
            case BOOK_URI_CODE:
                table_name=DBhelper.BOOK_TABLE_NAME;
                break;
            case USER_URI_CODE:
                table_name=DBhelper.USER_TABLE_NAME;
                break;
            default:
                break;
        }
        return table_name;
    }

    //主线程
    @Override
    public boolean onCreate() {
        Log.e("provider","create");
        context = getContext();
        initdb();
//        new Thread(new Runnable() {
//            @Override
//            public void run() {
//                initdb();
//
//            }
//        }).start();
        return true;
    }

    private void initdb() {
        DBhelper dBhelper = new DBhelper(context);
        db = dBhelper.getWritableDatabase();
//        db.execSQL("insert into book values(1,'android');");
//        db.execSQL("insert into book values(3,'html');");
//        db.execSQL("insert into book values(4,'ios');");
//        db.execSQL("insert into book values(2,'js');");
    }

    //以下五个方法运行在binder线程池中
    @Nullable
    @Override
    public String getType(Uri uri) {
        return null;
    }
    @Nullable
    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
        Log.e("provider","query");
        String table_name=gettablename(uri);
        if(table_name == null){
            throw new IllegalArgumentException("table does not exits");
        }
        Cursor query = db.query(table_name, projection, selection, selectionArgs, sortOrder, null, null);
        return query;
    }

    @Nullable
    @Override
    public Uri insert(Uri uri, ContentValues values) {
        Log.e("provider","insert");
        String table_name=gettablename(uri);
        if(table_name == null){
            throw new IllegalArgumentException("table does not exits");
        }
         db.insert(table_name, null, values);
        context.getContentResolver().notifyChange(uri,null);
        return uri;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        Log.e("provider","delete");
        String table_name=gettablename(uri);
        if(table_name == null){
            throw new IllegalArgumentException("table does not exits");
        }
        int delete = db.delete(table_name, selection, selectionArgs);
        if(delete>0){
            context.getContentResolver().notifyChange(uri,null);
        }
        return delete;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
        Log.e("provider","update");
        String table_name=gettablename(uri);
        if(table_name == null){
            throw new IllegalArgumentException("table does not exits");
        }
        int update = db.update(table_name, values, selection, selectionArgs);
        if(update>0){
            context.getContentResolver().notifyChange(uri,null);
        }
        return update;
    }
}
--------------------------
dbhelper
package w.x.z.mycontentprovider;

import android.content.Context;
import android.database.DatabaseErrorHandler;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

/**
 * Created by 123456 on 2017/6/30.
 */
public class DBhelper extends SQLiteOpenHelper {
    private static final String DB_NAME="BOOK_PROVIDER.db";
    public static final String BOOK_TABLE_NAME="BOOK";
    public static final String USER_TABLE_NAME="USER";
    private static final int DB_VERSION=1;
    private String CREATE_BOOK_TABLE="CREATE TABLE IF NOT EXISTS "+BOOK_TABLE_NAME+" (_id INTEGER PRIMARY KEY,"+"name TEXT)";
    private String CREATE_USER_TABLE="CREATE TABLE IF NOT EXISTS "+USER_TABLE_NAME+" (_id INTEGER PRIMARY KEY,"+"name TEXT,"+"sex INT)";
    public DBhelper(Context context) {
        this(context, DB_NAME, null, DB_VERSION);
    }
    public DBhelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
        super(context, name, factory, version);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
//        String sql_message = "create table t_book (id int primary key,userName varchar(50),datetime  varchar(50))";
        db.execSQL(CREATE_BOOK_TABLE);
        db.execSQL(CREATE_USER_TABLE);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    }
}
---------------------------
activity:
package w.x.z.mycontentprovider;

import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private ArrayList<Book> booklist=new ArrayList<>();
    private LinearLayout tv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        tv = (LinearLayout) findViewById(R.id.LL);
        Uri uri=Uri.parse("content://w.x.z.mycontentprovider.dododprovider/book");
        ContentValues values = new ContentValues();
        values.put("_id",0);
        values.put("name","css");
//        getContentResolver().insert(uri, values);
        Cursor query = getContentResolver().query(uri, new String[]{"_id","name"}, null, null, null);
        if(query!=null){
//            query.moveToFirst();
            while(query.moveToNext()){
                Book b=new Book();
                b.setBookid(query.getInt(0));
                b.setBookname(query.getString(1));
                booklist.add(b);
                Toast.makeText(this,"bookid="+b.getBookid()+"bookname="+b.getBookname(),Toast.LENGTH_SHORT).show();
            }
            query.close();
            getbook();
        }else{
            Toast.makeText(this,"query=null",Toast.LENGTH_SHORT).show();
        }
    }

    private void getbook() {
        for (Book b:booklist) {

            TextView t=new TextView(this);
            t.setText(b.getBookid()+";"+b.getBookname());
            t.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            tv.addView(t);
            Toast.makeText(this,"bookid="+b.getBookid()+"bookname="+b.getBookname(),Toast.LENGTH_SHORT).show();
        }
    }
}




