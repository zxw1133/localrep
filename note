1->contentprovider;alarmanager(定时器);pendingintent;(ringtone;videoview视频音频文件以及assert目录,raw目录);
 ->activity;window(floating window);(程序卸载应用);view;surfaceview;布局(include,merge,viewstub);ObjectAnimator;
 ->SavedState;android  xml;toolbar,actionbar;drawerlayout+framelayout+navigationview(自定义的ui view);
 ---------------------------------------------------------------------------------------------------------------------------------
  Activity:(stackoverflow)
    Activity <- FragmentActivity <- AppCompatActivity <- ActionBarActivity;'<-' means inheritance here. The reference said ActionBarActivity is deprecated, use AppCompatActivity instead.
    So basically, using AppCompatActivity is always the right choise. The differences between them:
    Activity is the basic one.
    Based on Activity, FragmentActivity provides the ability to use Fragment.
    Based on FragmentActivity, AppCompatActivity provides features to ActionBar.
  --------------------------------------------------------------------------------------------------------------------------------
  Activity与window:
    activity  封装phonewindow, windowmanager, viewroot, addview(),window直接管理视图,activity是window的容器,方便管理window,在service中可以直接创建window,绘制view视图;
    android 6.0浮动窗口权限问题;
  -------------------------------------------------------------------------------------------------------------------------------
  surfaceview与view:
     1、VIew主要适用于主动更新情况，并且只能在主线程绘制和更新画面，以及在绘图时没有使用双缓冲机制
     2、surfaceView主要适用于被动更新，如频繁的刷新，因为它可以通过子线程来进行页面的刷新，而且在底层已经实现双缓冲机制，绘图时不会出现闪烁问题
      总而言之，SurfaceView继承自View，主要用于视频、音频或耗时的绘图和经常更新视图（地图等等）显示，如果自定义的view需要频繁刷新，或者刷新时处理的数据量大，则可以考虑surfaceview取代view,因为View在主线程中会阻塞主线程，若view的刷新操作超过16ms则用户视觉会感到卡顿，由于surfaceView是子线程处理就不会
  -------------------------------------------------------------------------------------------------------------------------------
  布局标签(include,merge,viewstub):
  <include />标签能够重用布局文件; <merge/>标签在UI的结构优化中起着非常重要的作用，它可以删减多余的层级，优化UI; <ViewStub />标签最大的优点是当你需要时才会加载，使用他并不会影响UI初始化时的性能。
  -------------------------------------------------------------------------------------------------------------------------------
  android res下xml
  drawable目录下,sharpe:xml绘制几何形状,Selector:主要是用来改变ListView和Button控件的默认背景。layer-list:将多个图片或上面两种效果按照顺序层叠起来.
  -------------------------------------------------------------------------------------------------------------------------------
  Actionbar和toolbar:
  actionbar是android3.0之后默认的应用栏样式,但会随系统变化,v7包中的toolbar可以保持样式一致,且兼容低版本;
  侧滑,有是否在toolbar下面,是否覆盖toolbar;layout_gravity="start"或者left或者end;
  -------------------------------------------------------------------------------------------------------------------------------
2->dos(WINDOWS)
3->jsp,servlent,struct,hibernate,spring,jdbc,myeclipse
4->ip
5->vmdk,vdi,vhd
6->iso
7->iframe刷新,form,
8->svg.js,
9->canvas 动画,
10->js 读写本地文件
11->http;tcp/ip;socket;websocket;
12->threadpool :4种;图片缓存:softreference..(Map<String,softreference<Drawable>>);lrucache;三级缓存(内存,文件缓存,网络);
13->connection:set,list,queue;map
14->正则;java爬虫;
15->adapter,holder;getViewTreeObserver().addOnGlobalLayoutListener 监听view的布局,获取尺寸;
16->sql语句
17->tomcat
18->synchronized lock;Annotations;handler;进程间通信;传输格式(parcelable;serializable;bundle);
  AIDL:
    server:aidl  interface example{  String getStringmethod();},编译生成java文件,在service中将example.Stub重写getStringmethod(),并通过Ibinder返回;
    client:copy一份编译后的aidl文件,再次编译,serviceconnection 重写两个方法,在连接后的方法中获取传过来的ibinder,获取example实例;连接服务,通过隐式意图setaction,在android5.0后通过setpackagename转为显式意图,连接成功后获取实例,调用方法;
19->git
20->主流android库
21->js  (function(window){})(window);函数声明,函数表达式,window.data=data;
22->javac 编译默认操作系统编码格式(gbk);不能通过new String("中文".getBytes(),"utf-8");来进行转码;-->javac -encoding utf-8 Test.java
